<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Categorical X on R Doodles</title>
    <link>/tags/categorical-x/</link>
    <description>Recent content in Categorical X on R Doodles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Apr 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/categorical-x/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Covariate adjustment in randomized experiments</title>
      <link>/2019/04/covariate-adjustment-in-randomized-experiments/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/04/covariate-adjustment-in-randomized-experiments/</guid>
      <description>


&lt;p&gt;&lt;a href=&#34;https://twitter.com/statsepi/status/1115902270888128514&#34;&gt;The post motivated by a tweetorial from Darren Dahly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In an experiment, do we adjust for covariates that differ between treatment levels measured pre-experiment (“imbalance” in random assignment), where a difference is inferred from a t-test with p &amp;lt; 0.05? Or do we adjust for all covariates, regardless of differences pre-test? Or do we adjust only for covariates that have sustantial correlation with the outcome? Or do we not adjust at all?&lt;/p&gt;
&lt;p&gt;The original tweet focussed on Randomized Clinical Trials, which typically have large sample size. Here I simulate experimental biology, which typically has much smaller n.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(GGally)
library(data.table)

source(&amp;quot;../R/fake_x.R&amp;quot;) # bookdown&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;fake-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Fake data&lt;/h1&gt;
&lt;p&gt;Generate &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; correlated variables and assign the first to the response (&lt;span class=&#34;math inline&#34;&gt;\(\mathbf{y}\)&lt;/span&gt;) and the rest to the covariates (&lt;span class=&#34;math inline&#34;&gt;\(\mathbf{X}\)&lt;/span&gt;). Construct a treatment variable and effect and add this to the response.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 100 # per treatment level - this is modified below
p &amp;lt;- 3 # number of covariates (columns of the data)
pp1 &amp;lt;- p+1
beta_0 &amp;lt;- 0 # intercept

niter &amp;lt;- 2000 # modified below
measure_cols &amp;lt;- c(&amp;quot;no_adjust&amp;quot;, &amp;quot;imbalance&amp;quot;, &amp;quot;all_covariates&amp;quot;, &amp;quot;weak_covariates&amp;quot;, &amp;quot;strong_covariates&amp;quot;)

xcols &amp;lt;- paste0(&amp;quot;X&amp;quot;, 1:p)
build_ycols &amp;lt;- c(&amp;quot;Y_o&amp;quot;, xcols)
cor_ycols &amp;lt;- c(&amp;quot;Y&amp;quot;, xcols)

b_mat &amp;lt;- data.table(NULL)
se_mat &amp;lt;- data.table(NULL)
p_mat &amp;lt;- data.table(NULL)
ci_mat &amp;lt;- data.table(NULL)

for(beta_1 in c(0, 0.2, 0.8)){ # treatment effect on standardized scale
  beta &amp;lt;- c(beta_0, beta_1)
  for(n in c(6, 10, 50)){
    # larger iterations with smaller n
    niter &amp;lt;- round((3*10^4)/sqrt(n), 0)
    niter &amp;lt;- 2000
    
    # repopulate with NA each n
    b &amp;lt;- se &amp;lt;- pval &amp;lt;- ci &amp;lt;- matrix(NA, nrow=niter, ncol=length(measure_cols))
    colnames(b) &amp;lt;- colnames(se) &amp;lt;- colnames(pval) &amp;lt;- colnames(ci) &amp;lt;- measure_cols
    
    Treatment &amp;lt;- rep(c(&amp;quot;Cn&amp;quot;, &amp;quot;Tr&amp;quot;), each=n)
    X &amp;lt;- model.matrix(formula(&amp;quot;~ Treatment&amp;quot;))
    
    for(iter in 1:niter){
      # generate p random, correlated variables. The first is assigned to Y
      fake_data &amp;lt;- fake.X(n*2, pp1, fake.eigenvectors(pp1), fake.eigenvalues(pp1))
      colnames(fake_data) &amp;lt;- build_ycols
      
      # resacale so that var(Y) = 1, where Y is the first column
      fake_data &amp;lt;- fake_data/sd(fake_data[,1])
      
      fake_data &amp;lt;- data.table(fake_data)
      
      # view the scatterplots
      #gg &amp;lt;- ggpairs(X,progress = ggmatrix_progress(clear = FALSE))
      show_it &amp;lt;- FALSE
      if(show_it ==TRUE){
        gg &amp;lt;- ggpairs(fake_data)
        print(gg, progress = F)
      }
      
      # add the treatment effect
      fake_data[, Y:=Y_o + X%*%beta]
      fake_data[, Treatment:=Treatment]
      
      # model 1 - just the treatment
      fit1 &amp;lt;- lm(Y ~ Treatment, data=fake_data)
      res &amp;lt;- coef(summary(fit1))[&amp;quot;TreatmentTr&amp;quot;, ]
      b[iter, 1] &amp;lt;- res[&amp;quot;Estimate&amp;quot;]
      se[iter, 1] &amp;lt;- res[&amp;quot;Std. Error&amp;quot;]
      pval[iter, 1] &amp;lt;-res[&amp;quot;Pr(&amp;gt;|t|)&amp;quot;]
      ci_i &amp;lt;- confint(fit1)[&amp;quot;TreatmentTr&amp;quot;,]
      ci[iter, 1] &amp;lt;- ifelse(beta_1 &amp;gt;= ci_i[1] &amp;amp; beta_1 &amp;lt;= ci_i[2], 1, 0)
      res1 &amp;lt;- copy(res)
      
      # model 2 - adjust for imablance
      inc_xcols &amp;lt;- NULL
      for(i in 1:p){
        formula &amp;lt;- paste0(xcols[i], &amp;quot; ~ Treatment&amp;quot;)
        fit2a &amp;lt;- lm(formula, data=fake_data)
        if(coef(summary(fit2a))[&amp;quot;TreatmentTr&amp;quot;, &amp;quot;Pr(&amp;gt;|t|)&amp;quot;] &amp;lt; 0.05){
          inc_xcols &amp;lt;- c(inc_xcols, xcols[i])
        }
      }
      if(length(inc_xcols) &amp;gt; 0){ # if any signifianct effects refit, otherwise use old fit
        formula &amp;lt;- paste0(&amp;quot;Y ~ Treatment + &amp;quot;, paste(inc_xcols, collapse=&amp;quot; + &amp;quot;))
        fit2b &amp;lt;- lm(formula, data=fake_data)
        res &amp;lt;- coef(summary(fit2b))[&amp;quot;TreatmentTr&amp;quot;, ]
        ci_i &amp;lt;- confint(fit2b)[&amp;quot;TreatmentTr&amp;quot;,]
      }else{
        res &amp;lt;- res1
      }
      b[iter, 2] &amp;lt;- res[&amp;quot;Estimate&amp;quot;]
      se[iter, 2] &amp;lt;- res[&amp;quot;Std. Error&amp;quot;]
      pval[iter, 2] &amp;lt;-res[&amp;quot;Pr(&amp;gt;|t|)&amp;quot;]
      ci[iter, 2] &amp;lt;- ifelse(beta_1 &amp;gt;= ci_i[1] &amp;amp; beta_1 &amp;lt;= ci_i[2], 1, 0)
      
      
      # model 3- adjust for covariates
      (ycor &amp;lt;- abs(cor(fake_data[, .SD, .SDcols=cor_ycols])[2:pp1, 1]))
      mean(ycor)
      
      j &amp;lt;- 2
      for(target_cor in c(0, .2, .4)){
        j &amp;lt;- j+1
        if(target_cor == 0.2){
          inc &amp;lt;- which(ycor &amp;lt; target_cor) # include only weak covariates
        }else{
          inc &amp;lt;- which(ycor &amp;gt; target_cor) # include all OR strong covariates
        }
        if(length(inc) &amp;gt; 0){  # if matches refit, otherwise use old fit
          inc_xcols &amp;lt;- xcols[inc]
          formula &amp;lt;- paste0(&amp;quot;Y ~ Treatment + &amp;quot;, paste(inc_xcols, collapse=&amp;quot; + &amp;quot;))
          fit3 &amp;lt;- lm(formula, data=fake_data)
          res &amp;lt;- coef(summary(fit3))[&amp;quot;TreatmentTr&amp;quot;, ]
          ci_i &amp;lt;- confint(fit3)[&amp;quot;TreatmentTr&amp;quot;,]
        }else{
          res &amp;lt;- res1
        }
        b[iter, j] &amp;lt;- res[&amp;quot;Estimate&amp;quot;]
        se[iter, j] &amp;lt;- res[&amp;quot;Std. Error&amp;quot;]
        pval[iter, j] &amp;lt;-res[&amp;quot;Pr(&amp;gt;|t|)&amp;quot;]
        ci[iter, j] &amp;lt;- ifelse(beta_1 &amp;gt;= ci_i[1] &amp;amp; beta_1 &amp;lt;= ci_i[2], 1, 0)
      }
    }  
    b_mat &amp;lt;- rbind(b_mat, data.table(n=n, beta_1=beta_1, b))
    se_mat &amp;lt;- rbind(se_mat, data.table(n=n, beta_1=beta_1, se))
    p_mat &amp;lt;- rbind(p_mat, data.table(n=n, beta_1=beta_1, pval))
    ci_mat &amp;lt;- rbind(ci_mat, data.table(n=n, beta_1=beta_1, ci))
  }
}

p_long &amp;lt;- melt(p_mat, measure.vars=measure_cols, variable.name=&amp;quot;method&amp;quot;, value.name=&amp;quot;p&amp;quot;)
ci_long &amp;lt;- melt(ci_mat, measure.vars=measure_cols, variable.name=&amp;quot;method&amp;quot;, value.name=&amp;quot;covers&amp;quot;)
b_long &amp;lt;- melt(b_mat, measure.vars=measure_cols, variable.name=&amp;quot;method&amp;quot;, value.name=&amp;quot;b&amp;quot;)
se_long &amp;lt;- melt(se_mat, measure.vars=measure_cols, variable.name=&amp;quot;method&amp;quot;, value.name=&amp;quot;se&amp;quot;)


#ci_long[, .(coverage=sum(covers)/niter), by=.(method, n, beta_1)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;distribution-of-estimates&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Distribution of estimates&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pd &amp;lt;- position_dodge(0.8)
gg &amp;lt;- ggplot(data=b_long, aes(x=factor(n), y=b, fill=method)) +
  geom_boxplot(position=pd) +
  xlab(&amp;quot;sample size (per treatment level)&amp;quot;) +
  NULL
gg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-12-covariate-adjustment-in-randomized-experiments_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;distribution-of-se-of-estimate&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Distribution of SE of estimate&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pd &amp;lt;- position_dodge(0.8)
gg &amp;lt;- ggplot(data=se_long, aes(x=factor(n), y=se, fill=method)) +
  geom_boxplot(position=pd) +
  xlab(&amp;quot;sample size (per treatment level)&amp;quot;) +
  NULL
gg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-12-covariate-adjustment-in-randomized-experiments_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;type-i-error&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Type I error&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# type I
p_sum &amp;lt;- p_long[, .(error=sum(p &amp;lt; 0.05)/niter), by=.(method, n, beta_1)]
pd &amp;lt;- position_dodge(0.8)
gg &amp;lt;- ggplot(data=p_sum[beta_1==0], aes(x=factor(n), y=error, color=method, group=method)) +
  geom_point(position=pd) +
  geom_line(position=pd) + 
  xlab(&amp;quot;sample size (per treatment level)&amp;quot;) +
  ylab(&amp;quot;Type I error&amp;quot;) +
  # facet_grid(.~beta_1) +
  NULL
gg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-12-covariate-adjustment-in-randomized-experiments_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;power&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Power&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# power
# need p_sum from above
gg &amp;lt;- ggplot(data=p_sum[beta_1!=0], aes(x=factor(n), y=error, color=method)) +
  geom_point(position=pd) +
  xlab(&amp;quot;sample size (per treatment level)&amp;quot;) +
  ylab(&amp;quot;Power&amp;quot;) +
  facet_grid(.~beta_1) +
  NULL
gg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-12-covariate-adjustment-in-randomized-experiments_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sign-error&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Sign error&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# sign error
p_long2 &amp;lt;- cbind(p_long, b=b_long[, b])
sign_error &amp;lt;- p_long2[beta_1 &amp;gt; 0, .(error=sum(p &amp;lt; 0.1 &amp;amp; b &amp;lt; 0)/niter), by=.(method, n, beta_1)]
gg &amp;lt;- ggplot(data=sign_error, aes(x=factor(n), y=error, color=method)) +
  geom_point(position=pd) +
  xlab(&amp;quot;sample size (per treatment level)&amp;quot;) +
  ylab(&amp;quot;Sign error&amp;quot;) +
  facet_grid(.~beta_1) +
  NULL
gg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-12-covariate-adjustment-in-randomized-experiments_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Interaction plots with ggplot2</title>
      <link>/2018/10/interaction-plots-with-ggplot2/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/10/interaction-plots-with-ggplot2/</guid>
      <description>


&lt;p&gt;ggpubr is a fantastic resource for teaching applied biostats because it makes ggplot a bit easier for students. I’m not super familiar with all that ggpubr can do, but I’m not sure it includes a good “interaction plot” function. Maybe I’m wrong. But if I’m not, here is a simple function to create a gg_interaction plot.&lt;/p&gt;
&lt;p&gt;The gg_interaction function returns a ggplot of the &lt;em&gt;modeled&lt;/em&gt; means and standard errors and not the raw means and standard errors computed from each group independently. The modeled means and errors are computed using the emmeans function from the emmeans package. If a random term is passed, gg_interaction uses the function lmer, from the package lme4, to fit a linear mixed model with the random term as a random intercept.&lt;/p&gt;
&lt;p&gt;(requires ggplot2, data.table, and emmeans)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gg_interaction &amp;lt;- function(x, y, random=NULL, data){
  # x is a vector of the column labels of categorical variables
  # y is the response column
  # random is a column name of a blocking factor
  # data is a data.frame or data.table
  dt &amp;lt;- data.table(data)
  fixed_part &amp;lt;- paste(y, &amp;quot;~&amp;quot;, paste(x[1], x[2], sep=&amp;quot;*&amp;quot;))
  if(is.null(random)){ # linear model
    lm_formula &amp;lt;- formula(fixed_part)
    fit &amp;lt;- lm(lm_formula, data=dt)
  }else{ ## linear mixed model
    random_part &amp;lt;- paste(&amp;quot;(1|&amp;quot;, random, &amp;quot;)&amp;quot;, sep=&amp;quot;&amp;quot;)
    lmm_formula &amp;lt;- formula(paste(fixed_part, random_part, sep=&amp;quot; + &amp;quot;))
    fit &amp;lt;- lmer(lmm_formula, data=dt)
  }
  fit.emm &amp;lt;- data.table(summary(emmeans(fit, specs=x)))
  new_names &amp;lt;- c(&amp;quot;f1&amp;quot;, &amp;quot;f2&amp;quot;)
  setnames(fit.emm, old=x, new=new_names)
  pd &amp;lt;- position_dodge(.3)
  gg &amp;lt;- ggplot(data=fit.emm, aes(x=f1, y=emmean, shape=f2, group=f2)) +
    #geom_jitter(position=pd, color=&amp;#39;gray&amp;#39;, size=2) +
    geom_point(color=&amp;#39;black&amp;#39;, size=4, position=pd) +
    geom_errorbar(aes(ymin=(emmean-SE), ymax=(emmean+SE)), 
                  color=&amp;#39;black&amp;#39;, width=.2, position=pd) +
    geom_line(position=pd) +
    xlab(x[1]) +
    ylab(y) +
    theme_bw() +
    guides(shape=guide_legend(title=x[2])) +
    theme(axis.title=element_text(size = rel(1.5)),
          axis.text=element_text(size = rel(1.5)),
          legend.title=element_text(size = rel(1.3)),
          legend.text=element_text(size = rel(1.3))) +
    NULL
  return(gg)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use data from a study of the synergistic effect of UVB and temperature on infection intensity (citations below) to show how to use the function. The data are from a 2 x 2 factorial experiment and with a single blocking (random) factor “tank”.&lt;/p&gt;
&lt;p&gt;Dryad source: Cramp RL, Reid S, Seebacher F, Franklin CE (2014) Data from: Synergistic interaction between UVB radiation and temperature increases susceptibility to parasitic infection in a fish. Dryad Digital Repository. &lt;a href=&#34;https://doi.org/10.5061/dryad.74b31&#34; class=&#34;uri&#34;&gt;https://doi.org/10.5061/dryad.74b31&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Article Source: Cramp RL, Reid S, Seebacher F, Franklin CE (2014) Synergistic interaction between UVB radiation and temperature increases susceptibility to parasitic infection in a fish. Biology Letters 10(9): 20140449. &lt;a href=&#34;https://doi.org/10.1098/rsbl.2014.0449&#34; class=&#34;uri&#34;&gt;https://doi.org/10.1098/rsbl.2014.0449&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(readxl)
library(data.table)
library(lme4)
library(emmeans)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_path &amp;lt;- &amp;quot;../data&amp;quot;
folder &amp;lt;- &amp;quot;Data from Synergistic interaction between UVB radiation and temperature increases susceptibility to parasitic infection in a fish&amp;quot;
filename &amp;lt;- &amp;quot;Cramp et al raw data.xlsx&amp;quot;
file_path &amp;lt;- paste(data_path, folder, filename, sep=&amp;quot;/&amp;quot;)
fish &amp;lt;- data.table(read_excel(file_path, sheet=&amp;quot;Infection Intensity&amp;quot;))
setnames(fish, old=colnames(fish), new=c(&amp;quot;UV&amp;quot;, &amp;quot;Temp&amp;quot;, &amp;quot;Tank&amp;quot;, &amp;quot;Whitespots&amp;quot;))
fish[, UV:=factor(UV, c(&amp;quot;Low&amp;quot;, &amp;quot;High&amp;quot;))]
fish[, Temp:=factor(Temp)]
gg &amp;lt;- gg_interaction(x=c(&amp;quot;UV&amp;quot;, &amp;quot;Temp&amp;quot;), y=&amp;quot;Whitespots&amp;quot;, random=&amp;quot;Tank&amp;quot;, data=fish)
gg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-10-15-interaction-plots-with-ggplot2_files/figure-html/gg_interaction-example-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>